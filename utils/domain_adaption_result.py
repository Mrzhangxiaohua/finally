import numpy as np
from models.domain_regularizer import DomainRegularizer

reg_None = DomainRegularizer(l=0.0, name='mmd')
reg_MMD = DomainRegularizer(l=1.0, name='mmd', beta=1.2)
reg_MMatch = DomainRegularizer(l=1.0, name='mmatch')
reg_SMD_D1 = DomainRegularizer(l=1.0, name='SMD_D1')
reg_SMD_D1_HAT = DomainRegularizer(l=1.0, name='SMD_D1_HAT')
reg_SMD_D2 = DomainRegularizer(l=1.0, name='SMD_D2')
reg_SMD_D2_HAT = DomainRegularizer(l=1.0, name='SMD_D2_HAT')
reg_DWMD = DomainRegularizer(l=1.0, name='DWMD')
reg_DWMD1 = DomainRegularizer(l=1.0, name='DWMD1')
reg_DWMD2 = DomainRegularizer(l=1.0, name='DWMD2')
reg_DWMD3 = DomainRegularizer(l=1.0, name='DWMD3')
reg_DWMD4 = DomainRegularizer(l=1.0, name='DWMD4')
reg_DWMD5 = DomainRegularizer(l=1.0, name='DWMD5')
reg_DWMD6 = DomainRegularizer(l=1.0, name='DWMD6')
reg_DWMD7 = DomainRegularizer(l=1.0, name='DWMD7')


def calculate_adaption(EXP_FOLDER, N_REPETITIONS, NN, X_s, Y_s, X_t, Y_t):
    acc_None, acc_MMD, acc_MMatch = np.array([]), np.array([]), np.array([])
    acc_SMD_D1, acc_SMD_D1_HAT, acc_SMD_D2, acc_SMD_D2_HAT = np.array([]), np.array([]), np.array([]), np.array([])
    acc_DWMD, acc_DWMD1, acc_DWMD2, acc_DWMD3, acc_DWMD4, acc_DWMD5, acc_DWMD6, acc_DWMD7 = np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([])
    for i in range(N_REPETITIONS):
        np.random.seed(i)
        print('--')
        nn_None = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_None)
        nn_MMD = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_MMD)
        nn_MMatch = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_MMatch)
        nn_SMD_D1 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_SMD_D1)
        # nn_SMD_D1_HAT = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_SMD_D1_HAT)
        nn_SMD_D2 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_SMD_D2)
        # nn_SMD_D2_HAT = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_SMD_D2_HAT)
        nn_DWMD = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD)
        nn_DWMD1 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD1)
        nn_DWMD2 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD2)
        nn_DWMD3 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD3)
        nn_DWMD4 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD4)
        nn_DWMD5 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD5)
        nn_DWMD6 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD6)
        nn_DWMD7 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD7)

        nn_None.fit(X_s, Y_s, X_t)
        nn_MMD.fit(X_s, Y_s, X_t)
        nn_MMatch.fit(X_s, Y_s, X_t)
        nn_SMD_D1.fit(X_s, Y_s, X_t)
        # nn_SMD_D1_HAT.fit(X_s, Y_s, X_t)
        nn_SMD_D2.fit(X_s, Y_s, X_t)
        # nn_SMD_D2_HAT.fit(X_s, Y_s, X_t)
        nn_DWMD.fit(X_s, Y_s, X_t)
        nn_DWMD1.fit(X_s, Y_s, X_t)
        nn_DWMD2.fit(X_s, Y_s, X_t)
        nn_DWMD3.fit(X_s, Y_s, X_t)
        nn_DWMD4.fit(X_s, Y_s, X_t)
        nn_DWMD5.fit(X_s, Y_s, X_t)
        nn_DWMD6.fit(X_s, Y_s, X_t)
        nn_DWMD7.fit(X_s, Y_s, X_t)

        acc_tst_None = nn_None.evaluate(X_t, Y_t)
        acc_tst_MMD = nn_MMD.evaluate(X_t, Y_t)
        acc_tst_MMatch = nn_MMatch.evaluate(X_t, Y_t)
        acc_tst_SMD_D1 = nn_SMD_D1.evaluate(X_t, Y_t)
        # acc_tst_SMD_D1_HAT = nn_SMD_D1_HAT.evaluate(X_t, Y_t)
        acc_tst_SMD_D2 = nn_SMD_D2.evaluate(X_t, Y_t)
        # acc_tst_SMD_D2_HAT = nn_SMD_D2_HAT.evaluate(X_t, Y_t)
        acc_tst_DWMD = nn_DWMD.evaluate(X_t, Y_t)
        acc_tst_DWMD1 = nn_DWMD1.evaluate(X_t, Y_t)
        acc_tst_DWMD2 = nn_DWMD2.evaluate(X_t, Y_t)
        acc_tst_DWMD3 = nn_DWMD3.evaluate(X_t, Y_t)
        acc_tst_DWMD4 = nn_DWMD4.evaluate(X_t, Y_t)
        acc_tst_DWMD5 = nn_DWMD5.evaluate(X_t, Y_t)
        acc_tst_DWMD6 = nn_DWMD6.evaluate(X_t, Y_t)
        acc_tst_DWMD7 = nn_DWMD7.evaluate(X_t, Y_t)

        acc_None = np.append(acc_None, acc_tst_None)
        acc_MMD = np.append(acc_MMD, acc_tst_MMD)
        acc_MMatch = np.append(acc_MMatch, acc_tst_MMatch)
        acc_SMD_D1 = np.append(acc_SMD_D1, acc_tst_SMD_D1)
        # acc_SMD_D1_HAT = np.append(acc_SMD_D1_HAT, acc_tst_SMD_D1_HAT)
        acc_SMD_D2 = np.append(acc_SMD_D2, acc_tst_SMD_D2)
        # acc_SMD_D2_HAT = np.append(acc_SMD_D2_HAT, acc_tst_SMD_D2_HAT)
        acc_DWMD = np.append(acc_DWMD, acc_tst_DWMD)
        acc_DWMD1 = np.append(acc_DWMD1, acc_tst_DWMD1)
        acc_DWMD2 = np.append(acc_DWMD2, acc_tst_DWMD2)
        acc_DWMD3 = np.append(acc_DWMD3, acc_tst_DWMD3)
        acc_DWMD4 = np.append(acc_DWMD4, acc_tst_DWMD4)
        acc_DWMD5 = np.append(acc_DWMD5, acc_tst_DWMD5)
        acc_DWMD6 = np.append(acc_DWMD6, acc_tst_DWMD6)
        acc_DWMD7 = np.append(acc_DWMD7, acc_tst_DWMD7)

        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_None=       ' + str(acc_tst_None))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_MMD =       ' + str(acc_tst_MMD))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_MMatch=     ' + str(acc_tst_MMatch))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_SMD_D1=     ' + str(acc_tst_SMD_D1))
        # print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_SMD_D1_HAT= ' + str(acc_tst_SMD_D1_HAT))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_SMD_D2=     ' + str(acc_tst_SMD_D2))
        # print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_SMD_D2_HAT= ' + str(acc_tst_SMD_D2_HAT))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD=       ' + str(acc_tst_DWMD))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD1=      ' + str(acc_tst_DWMD1))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD2=      ' + str(acc_tst_DWMD2))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD3=      ' + str(acc_tst_DWMD3))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD4=      ' + str(acc_tst_DWMD4))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD5=      ' + str(acc_tst_DWMD5))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD6=      ' + str(acc_tst_DWMD6))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD7=      ' + str(acc_tst_DWMD7))
    return acc_None, acc_MMD, acc_MMatch, acc_SMD_D1, acc_SMD_D1_HAT, acc_SMD_D2, acc_SMD_D2_HAT, acc_DWMD, acc_DWMD1, acc_DWMD2, acc_DWMD3, acc_DWMD4, acc_DWMD5, acc_DWMD6, acc_DWMD7


def calculate_adaption_test(EXP_FOLDER, N_REPETITIONS, NN, X_s, Y_s, X_t, Y_t):
    acc_None, acc_MMD, acc_MMatch = np.array([]), np.array([]), np.array([])
    acc_SMD_D1, acc_SMD_D1_HAT, acc_SMD_D2, acc_SMD_D2_HAT = np.array([]), np.array([]), np.array([]), np.array([])
    acc_DWMD, acc_DWMD1, acc_DWMD2, acc_DWMD3, acc_DWMD4, acc_DWMD5, acc_DWMD6, acc_DWMD7 = np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([])
    for i in range(N_REPETITIONS):
        np.random.seed(i)
        print('--')
        nn_None = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_None)
        nn_MMD = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_MMD)
        nn_MMatch = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_MMatch)
        nn_DWMD1 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD1)
        nn_DWMD2 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD2)
        nn_DWMD3 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD3)
        nn_DWMD6 = NN(EXP_FOLDER, n_features=256, domain_regularizer=reg_DWMD6)

        nn_None.fit(X_s, Y_s, X_t)
        nn_MMD.fit(X_s, Y_s, X_t)
        nn_MMatch.fit(X_s, Y_s, X_t)
        nn_DWMD1.fit(X_s, Y_s, X_t)
        nn_DWMD2.fit(X_s, Y_s, X_t)
        nn_DWMD3.fit(X_s, Y_s, X_t)
        nn_DWMD6.fit(X_s, Y_s, X_t)

        acc_tst_None = nn_None.evaluate(X_t, Y_t)
        acc_tst_MMD = nn_MMD.evaluate(X_t, Y_t)
        acc_tst_MMatch = nn_MMatch.evaluate(X_t, Y_t)
        acc_tst_DWMD1 = nn_DWMD1.evaluate(X_t, Y_t)
        acc_tst_DWMD2 = nn_DWMD2.evaluate(X_t, Y_t)
        acc_tst_DWMD3 = nn_DWMD3.evaluate(X_t, Y_t)
        acc_tst_DWMD6 = nn_DWMD6.evaluate(X_t, Y_t)

        acc_None = np.append(acc_None, acc_tst_None)
        acc_MMD = np.append(acc_MMD, acc_tst_MMD)
        acc_MMatch = np.append(acc_MMatch, acc_tst_MMatch)
        acc_DWMD1 = np.append(acc_DWMD1, acc_tst_DWMD1)
        acc_DWMD2 = np.append(acc_DWMD2, acc_tst_DWMD2)
        acc_DWMD3 = np.append(acc_DWMD3, acc_tst_DWMD3)
        acc_DWMD6 = np.append(acc_DWMD6, acc_tst_DWMD6)

        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_None=       ' + str(acc_tst_None))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_MMD =       ' + str(acc_tst_MMD))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_MMatch=     ' + str(acc_tst_MMatch))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD1=      ' + str(acc_tst_DWMD1))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD2=      ' + str(acc_tst_DWMD2))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD3=      ' + str(acc_tst_DWMD3))
        print(str(i + 1) + '/' + str(N_REPETITIONS) + ' acc-tst_DWMD6=      ' + str(acc_tst_DWMD6))
    return acc_None, acc_MMD, acc_MMatch, acc_SMD_D1, acc_SMD_D1_HAT, acc_SMD_D2, acc_SMD_D2_HAT, acc_DWMD, acc_DWMD1, acc_DWMD2, acc_DWMD3, acc_DWMD4, acc_DWMD5, acc_DWMD6, acc_DWMD7

def calculate_print(acc_None, acc_MMD, acc_MMatch, acc_SMD_D1, acc_SMD_D1_HAT, acc_SMD_D2, acc_SMD_D2_HAT, acc_DWMD,
                    acc_DWMD1, acc_DWMD2, acc_DWMD3, acc_DWMD4, acc_DWMD5, acc_DWMD6, acc_DWMD7):
    print('None         acc-tst= ' + str(acc_None.mean()) + '+-' + str(acc_None.std()))
    print('MMD          acc-tst= ' + str(acc_MMD.mean()) + '+-' + str(acc_MMD.std()))
    print('MMatch       acc-tst= ' + str(acc_MMatch.mean()) + '+-' + str(acc_MMatch.std()))
    print('SMD_D1       acc-tst= ' + str(acc_SMD_D1.mean()) + '+-' + str(acc_SMD_D1.std()))
    # print('SMD_D1_HAT   acc-tst= ' + str(acc_SMD_D1_HAT.mean()) + '+-' + str(acc_SMD_D1_HAT.std()))
    print('SMD_D2       acc-tst= ' + str(acc_SMD_D2.mean()) + '+-' + str(acc_SMD_D2.std()))
    # print('SMD_D2_HAT   acc-tst= ' + str(acc_SMD_D2_HAT.mean()) + '+-' + str(acc_SMD_D2_HAT.std()))
    print('SMD_DWMD   acc-tst= ' + str(acc_DWMD.mean()) + '+-' + str(acc_DWMD.std()))
    print('SMD_DWMD1   acc-tst= ' + str(acc_DWMD1.mean()) + '+-' + str(acc_DWMD1.std()))
    print('SMD_DWMD2   acc-tst= ' + str(acc_DWMD2.mean()) + '+-' + str(acc_DWMD2.std()))
    print('SMD_DWMD3   acc-tst= ' + str(acc_DWMD3.mean()) + '+-' + str(acc_DWMD3.std()))
    print('SMD_DWMD4   acc-tst= ' + str(acc_DWMD4.mean()) + '+-' + str(acc_DWMD4.std()))
    print('SMD_DWMD5   acc-tst= ' + str(acc_DWMD5.mean()) + '+-' + str(acc_DWMD5.std()))
    print('SMD_DWMD6   acc-tst= ' + str(acc_DWMD6.mean()) + '+-' + str(acc_DWMD6.std()))
    print('SMD_DWMD7   acc-tst= ' + str(acc_DWMD7.mean()) + '+-' + str(acc_DWMD7.std()))
